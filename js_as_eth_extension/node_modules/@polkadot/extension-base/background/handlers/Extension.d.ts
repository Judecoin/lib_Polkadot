/// <reference types="chrome" />
import type { MessageTypes, RequestTypes, ResponseType } from '../types';
import State from './State';
export default class Extension {
    #private;
    constructor(state: State);
    private accountsCreateExternal;
    private accountsCreateHardware;
    private accountsCreateSuri;
    private accountsChangePassword;
    private accountsEdit;
    private accountsExport;
    private accountsBatchExport;
    private accountsForget;
    private refreshAccountPasswordCache;
    private accountsShow;
    private accountsTie;
    private accountsValidate;
    private accountsSubscribe;
    private authorizeApprove;
    private getAuthList;
    private authorizeReject;
    private authorizeSubscribe;
    private metadataApprove;
    private metadataGet;
    private metadataList;
    private metadataReject;
    private metadataSubscribe;
    private jsonRestore;
    private batchRestore;
    private jsonGetAccountInfo;
    private seedCreate;
    private seedValidate;
    private signingApprovePassword;
    private signingApproveSignature;
    private signingCancel;
    private signingIsLocked;
    private signingSubscribe;
    private windowOpen;
    private derive;
    private derivationValidate;
    private derivationCreate;
    private toggleAuthorization;
    handle<TMessageType extends MessageTypes>(id: string, type: TMessageType, request: RequestTypes[TMessageType], port: chrome.runtime.Port): Promise<ResponseType<TMessageType>>;
}
