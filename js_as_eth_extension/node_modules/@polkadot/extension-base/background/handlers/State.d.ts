/// <reference types="chrome" />
import type { MetadataDef, ProviderMeta } from '@polkadot/extension-inject/types';
import type { JsonRpcResponse, ProviderInterface, ProviderInterfaceCallback } from '@polkadot/rpc-provider/types';
import type { AccountJson, AuthorizeRequest, MetadataRequest, RequestAuthorizeTab, RequestRpcSend, RequestRpcSubscribe, RequestRpcUnsubscribe, RequestSign, ResponseRpcListProviders, ResponseSigning, SigningRequest } from '../types';
import { BehaviorSubject } from 'rxjs';
interface Resolver<T> {
    reject: (error: Error) => void;
    resolve: (result: T) => void;
}
interface AuthRequest extends Resolver<boolean> {
    id: string;
    idStr: string;
    request: RequestAuthorizeTab;
    url: string;
}
export declare type AuthUrls = Record<string, AuthUrlInfo>;
export interface AuthUrlInfo {
    count: number;
    id: string;
    isAllowed: boolean;
    origin: string;
    url: string;
}
interface MetaRequest extends Resolver<boolean> {
    id: string;
    request: MetadataDef;
    url: string;
}
declare type Providers = Record<string, {
    meta: ProviderMeta;
    start: () => ProviderInterface;
}>;
interface SignRequest extends Resolver<ResponseSigning> {
    account: AccountJson;
    id: string;
    request: RequestSign;
    url: string;
}
export default class State {
    #private;
    readonly authSubject: BehaviorSubject<AuthorizeRequest[]>;
    readonly metaSubject: BehaviorSubject<MetadataRequest[]>;
    readonly signSubject: BehaviorSubject<SigningRequest[]>;
    constructor(providers?: Providers);
    get knownMetadata(): MetadataDef[];
    get numAuthRequests(): number;
    get numMetaRequests(): number;
    get numSignRequests(): number;
    get allAuthRequests(): AuthorizeRequest[];
    get allMetaRequests(): MetadataRequest[];
    get allSignRequests(): SigningRequest[];
    get authUrls(): AuthUrls;
    private popupClose;
    private popupOpen;
    private authComplete;
    private saveCurrentAuthList;
    private metaComplete;
    private signComplete;
    private stripUrl;
    private updateIcon;
    toggleAuthorization(url: string): AuthUrls;
    private updateIconAuth;
    private updateIconMeta;
    private updateIconSign;
    authorizeUrl(url: string, request: RequestAuthorizeTab): Promise<boolean>;
    ensureUrlAuthorized(url: string): boolean;
    injectMetadata(url: string, request: MetadataDef): Promise<boolean>;
    getAuthRequest(id: string): AuthRequest;
    getMetaRequest(id: string): MetaRequest;
    getSignRequest(id: string): SignRequest;
    rpcListProviders(): Promise<ResponseRpcListProviders>;
    rpcSend(request: RequestRpcSend, port: chrome.runtime.Port): Promise<JsonRpcResponse>;
    rpcStartProvider(key: string, port: chrome.runtime.Port): Promise<ProviderMeta>;
    rpcSubscribe({ method, params, type }: RequestRpcSubscribe, cb: ProviderInterfaceCallback, port: chrome.runtime.Port): Promise<number | string>;
    rpcSubscribeConnected(_request: null, cb: ProviderInterfaceCallback, port: chrome.runtime.Port): void;
    rpcUnsubscribe(request: RequestRpcUnsubscribe, port: chrome.runtime.Port): Promise<boolean>;
    saveMetadata(meta: MetadataDef): void;
    sign(url: string, request: RequestSign, account: AccountJson): Promise<ResponseSigning>;
}
export {};
